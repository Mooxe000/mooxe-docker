/* Generated by the Nim Compiler v1.0.6 */
/*   (c) 2019 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI3650 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI88432 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI91247 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3662 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3630 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3652 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3644 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3658 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI21156 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3608 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3714 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3708 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3626 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3628 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3642 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3646 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3694 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI3604 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI162015 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
NTI3604.base = NTI3694;
var NNI162015 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI138, name: "name", sons: null}, 
{kind: 1, offset: "age", len: 0, typ: NTI3604, name: "age", sons: null}]};
NTI162015.node = NNI162015;
var NNI3646 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3646.node = NNI3646;
var NNI3642 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3642.node = NNI3642;
var NNI3628 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3628.node = NNI3628;
NTI3708.base = NTI3626;
NTI3714.base = NTI3626;
var NNI3626 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3708, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI114, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3714, name: "up", sons: null}]};
NTI3626.node = NNI3626;
var NNI3608 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3608.node = NNI3608;
NTI3626.base = NTI3608;
NTI3628.base = NTI3626;
NTI3642.base = NTI3628;
NTI3646.base = NTI3642;
var NNI21156 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI21156.node = NNI21156;
var NNI3658 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3658.node = NNI3658;
NTI3658.base = NTI3628;
var NNI3644 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3644.node = NNI3644;
NTI3644.base = NTI3642;
var NNI3652 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3652.node = NNI3652;
var NNI3630 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3630.node = NNI3630;
NTI3630.base = NTI3626;
NTI3652.base = NTI3630;
var NNI3662 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3662.node = NNI3662;
NTI3662.base = NTI3628;
var NNI91247 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI88432, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI104, name: "b", sons: null}]};
NTI91247.node = NNI91247;
var NNI3650 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3650.node = NNI3650;
NTI3650.base = NTI3628;

function makeNimstrLit(c_23270) {
		  var ln = c_23270.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_23270.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_24827, src_24828, ti_24829) {
	var result_25019 = null;

		switch (ti_24829.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_24801(ti_24829))) {
			result_25019 = src_24828;
			}
			else {
				result_25019 = [src_24828[0], src_24828[1]];
			}
			
			break;
		case 19:
			      if (dest_24827 === null || dest_24827 === undefined) {
        dest_24827 = {};
      }
      else {
        for (var key in dest_24827) { delete dest_24827[key]; }
      }
      for (var key in src_24828) { dest_24827[key] = src_24828[key]; }
      result_25019 = dest_24827;
    
			break;
		case 18:
		case 17:
			if (!((ti_24829.base == null))) {
			result_25019 = nimCopy(dest_24827, src_24828, ti_24829.base);
			}
			else {
			if ((ti_24829.kind == 17)) {
			result_25019 = (dest_24827 === null || dest_24827 === undefined) ? {m_type: ti_24829} : dest_24827;
			}
			else {
				result_25019 = (dest_24827 === null || dest_24827 === undefined) ? {} : dest_24827;
			}
			}
			nimCopyAux(result_25019, src_24828, ti_24829.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_24828 === null) {
        result_25019 = null;
      }
      else {
        if (dest_24827 === null || dest_24827 === undefined) {
          dest_24827 = new Array(src_24828.length);
        }
        else {
          dest_24827.length = src_24828.length;
        }
        result_25019 = dest_24827;
        for (var i = 0; i < src_24828.length; ++i) {
          result_25019[i] = nimCopy(result_25019[i], src_24828[i], ti_24829.base);
        }
      }
    
			break;
		case 28:
			      if (src_24828 !== null) {
        result_25019 = src_24828.slice(0);
      }
    
			break;
		default: 
			result_25019 = src_24828;
			break;
		}

	return result_25019;

}

function toJSStr(s_23304) {
										var Tmp5;
						var Tmp7;

	var result_23305 = null;

		var res_23363 = new_seq_23336((s_23304 != null ? s_23304.length : 0));
		var i_23365 = 0;
		var j_23367 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_23365 < (s_23304 != null ? s_23304.length : 0))) break L2;
					var c_23368 = s_23304[i_23365];
					if ((c_23368 < 128)) {
					res_23363[j_23367] = String.fromCharCode(c_23368);
					i_23365 += 1;
					}
					else {
						var helper_23391 = new_seq_23336(0);
						L3: do {
								L4: while (true) {
								if (!true) break L4;
									var code_23392 = c_23368.toString(16);
									if (((code_23392 != null ? code_23392.length : 0) == 1)) {
									if (helper_23391 != null) { helper_23391.push("%0"); } else { helper_23391 = ["%0"]; };
									}
									else {
									if (helper_23391 != null) { helper_23391.push("%"); } else { helper_23391 = ["%"]; };
									}
									
									if (helper_23391 != null) { helper_23391.push(code_23392); } else { helper_23391 = [code_23392]; };
									i_23365 += 1;
										if (((s_23304 != null ? s_23304.length : 0) <= i_23365)) Tmp5 = true; else {											Tmp5 = (s_23304[i_23365] < 128);										}									if (Tmp5) {
									break L3;
									}
									
									c_23368 = s_23304[i_23365];
								}
						} while(false);
++excHandler;
						Tmp7 = framePtr;
						try {
						res_23363[j_23367] = decodeURIComponent(helper_23391.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
						framePtr = Tmp7;
						res_23363[j_23367] = helper_23391.join("");
						lastJSError = prevJSError;
						} finally {
						framePtr = Tmp7;
						}
					}
					
					j_23367 += 1;
				}
		} while(false);
		if (res_23363 === null) res_23363 = [];
               if (res_23363.length < j_23367) { for (var i=res_23363.length;i<j_23367;++i) res_23363.push(null); }
               else { res_23363.length = j_23367; };
		result_23305 = res_23363.join("");

	return result_23305;

}

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}

function mnewString(len_23463) {
		    return new Array(len_23463);
  

	
}

function arrayConstr(len_25086, value_25087, typ_25088) {
		    var result = new Array(len_25086);
    for (var i = 0; i < len_25086; ++i) result[i] = nimCopy(null, value_25087, typ_25088);
    return result;
  

	
}

function cstrToNimstr(c_23287) {
		  var ln = c_23287.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_23287.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_23287.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function raiseException(e_21618, ename_21619) {
		e_21618.name = ename_21619;
		if ((excHandler == 0)) {
		unhandledException(e_21618);
		}
		
		e_21618.trace = nimCopy(null, raw_write_stack_trace_21468(), NTI138);
		throw e_21618;

	
}

function addInt(a_23803, b_23804) {
		    var result = a_23803 + b_23804;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet2 = setConstr(60, 62, 94);

function chckIndx(i_25105, a_25106, b_25107) {
			var Tmp1;

	var result_25108 = 0;

	BeforeRet: do {
			if (!(a_25106 <= i_25105)) Tmp1 = false; else {				Tmp1 = (i_25105 <= b_25107);			}		if (Tmp1) {
		result_25108 = i_25105;
		break BeforeRet;
		}
		else {
		raiseIndexError(i_25105, a_25106, b_25107);
		}
		
	} while (false);

	return result_25108;

}
var ConstSet3 = setConstr(60, 62, 94);
var ConstSet4 = setConstr(45, 43, 32);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr([48, 57]);

function subInt(a_23821, b_23822) {
		    var result = a_23821 - b_23822;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function divInt(a_23857, b_23858) {
		    if (b_23858 == 0) raiseDivByZero();
    if (b_23858 == -1 && a_23857 == 2147483647) raiseOverflow();
    return Math.trunc(a_23857 / b_23858);
  

	
}

function mulInt(a_23839, b_23840) {
		    var result = a_23839 * b_23840;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet8 = setConstr([65, 90], [97, 122]);

function chckRange(i_25124, a_25125, b_25126) {
			var Tmp1;

	var result_25127 = 0;

	BeforeRet: do {
			if (!(a_25125 <= i_25124)) Tmp1 = false; else {				Tmp1 = (i_25124 <= b_25126);			}		if (Tmp1) {
		result_25127 = i_25124;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_25127;

}

function modInt(a_23875, b_23876) {
		    if (b_23876 == 0) raiseDivByZero();
    if (b_23876 == -1 && a_23875 == 2147483647) raiseOverflow();
    return Math.trunc(a_23875 % b_23876);
  

	
}

function nimCharToStr(x_21062) {
	var result_21063 = null;

		result_21063 = nimCopy(null, mnewString(1), NTI138);
		result_21063[0] = x_21062;

	return result_21063;

}

function addChar(x_25311, c_25312) {
		x_25311.push(c_25312);

	
}
var nim_program_result = 0;
var global_raise_hook_18618 = [null];
var local_raise_hook_18623 = [null];
var out_of_mem_hook_18626 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }

function is_fat_pointer_24801(ti_24803) {
	var result_24804 = false;

	BeforeRet: do {
		result_24804 = !((ConstSet1[ti_24803.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_24804;

}

function nimCopyAux(dest_24832, src_24833, n_24835) {
		switch (n_24835.kind) {
		case 0:
			break;
		case 1:
			      dest_24832[n_24835.offset] = nimCopy(dest_24832[n_24835.offset], src_24833[n_24835.offset], n_24835.typ);
    
			break;
		case 2:
			    for (var i = 0; i < n_24835.sons.length; i++) {
      nimCopyAux(dest_24832, src_24833, n_24835.sons[i]);
    }
    
			break;
		case 3:
			      dest_24832[n_24835.offset] = nimCopy(dest_24832[n_24835.offset], src_24833[n_24835.offset], n_24835.typ);
      for (var i = 0; i < n_24835.sons.length; ++i) {
        nimCopyAux(dest_24832, src_24833, n_24835.sons[i][1]);
      }
    
			break;
		}

	
}

function new_seq_23336(len_23339) {
	var result_23341 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
		F.line = 997;
		result_23341 = new Array(len_23339); for (var i=0;i<len_23339;++i) {result_23341[i]=null;}	framePtr = F.prev;

	return result_23341;

}

function add_18638(x_18641, x_18641_Idx, y_18642) {
		      if (x_18641[x_18641_Idx] === null) { x_18641[x_18641_Idx] = []; }
      var off = x_18641[x_18641_Idx].length;
      x_18641[x_18641_Idx].length += y_18642.length;
      for (var i = 0; i < y_18642.length; ++i) {
        x_18641[x_18641_Idx][off+i] = y_18642.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_21151(f_21153) {
					var Tmp3;

	var result_21154 = [null];

		var it_21162 = f_21153;
		var i_21164 = 0;
		var total_21166 = 0;
		var temp_frames_21173 = arrayConstr(64, {Field0: null, Field1: 0}, NTI21156);
		L1: do {
				L2: while (true) {
					if (!!((it_21162 == null))) Tmp3 = false; else {						Tmp3 = (i_21164 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_21173[i_21164].Field0 = it_21162.procname;
					temp_frames_21173[i_21164].Field1 = it_21162.line;
					i_21164 += 1;
					total_21166 += 1;
					it_21162 = it_21162.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_21162 == null))) break L5;
					total_21166 += 1;
					it_21162 = it_21162.prev;
				}
		} while(false);
		result_21154[0] = nimCopy(null, [], NTI138);
		if (!((total_21166 == i_21164))) {
		if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(makeNimstrLit("(")); } else { result_21154[0] = makeNimstrLit("("); };
		if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(cstrToNimstr(((total_21166 - i_21164))+"")); } else { result_21154[0] = cstrToNimstr(((total_21166 - i_21164))+"").slice(); };
		if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_21154[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_21421 = 0;
			var colontmp__162539 = 0;
			colontmp__162539 = (i_21164 - 1);
			var res_162544 = colontmp__162539;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_162544)) break L8;
						j_21421 = res_162544;
						add_18638(result_21154, 0, temp_frames_21173[j_21421].Field0);
						if ((0 < temp_frames_21173[j_21421].Field1)) {
						if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(makeNimstrLit(", line: ")); } else { result_21154[0] = makeNimstrLit(", line: "); };
						if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(cstrToNimstr((temp_frames_21173[j_21421].Field1)+"")); } else { result_21154[0] = cstrToNimstr((temp_frames_21173[j_21421].Field1)+"").slice(); };
						}
						
						if (result_21154[0] != null) { result_21154[0] = (result_21154[0]).concat(makeNimstrLit("\x0A")); } else { result_21154[0] = makeNimstrLit("\x0A"); };
						res_162544 -= 1;
					}
			} while(false);
		} while(false);

	return result_21154[0];

}

function raw_write_stack_trace_21468() {
	var result_21470 = null;

		if (!((framePtr == null))) {
		result_21470 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_21151(framePtr) || []), NTI138);
		}
		else {
			result_21470 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_21470;

}

function unhandledException(e_21529) {
		var buf_21530 = [[]];
		if (!(((e_21529.message != null ? e_21529.message.length : 0) == 0))) {
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_21530[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(e_21529.message); } else { buf_21530[0] = e_21529.message.slice(); };
		}
		else {
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_21530[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit(" [")); } else { buf_21530[0] = makeNimstrLit(" ["); };
		add_18638(buf_21530, 0, e_21529.name);
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("]\x0A")); } else { buf_21530[0] = makeNimstrLit("]\x0A"); };
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(raw_write_stack_trace_21468()); } else { buf_21530[0] = raw_write_stack_trace_21468().slice(); };
		var cbuf_21601 = toJSStr(buf_21530[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_21601);
  }
  else {
    throw cbuf_21601;
  }
  

	
}

function raiseOverflow() {
		var eHEX60gensym22058_22203 = null;
		eHEX60gensym22058_22203 = {m_type: NTI3646, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym22058_22203.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		eHEX60gensym22058_22203.parent = null;
		raiseException(eHEX60gensym22058_22203, "OverflowError");

	
}

function raiseIndexError(i_22655, a_22656, b_22657) {
		var Tmp1;

		var eHEX60gensym22802_23003 = null;
		eHEX60gensym22802_23003 = {m_type: NTI3658, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		if ((b_22657 < a_22656)) {
		Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
		}
		else {
		Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_22655)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_22656)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_22657)+"") || []);
		}
		
		eHEX60gensym22802_23003.message = nimCopy(null, Tmp1, NTI138);
		eHEX60gensym22802_23003.parent = null;
		raiseException(eHEX60gensym22802_23003, "IndexError");

	
}

function raiseDivByZero() {
		var eHEX60gensym22257_22403 = null;
		eHEX60gensym22257_22403 = {m_type: NTI3644, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym22257_22403.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
		eHEX60gensym22257_22403.parent = null;
		raiseException(eHEX60gensym22257_22403, "DivByZeroError");

	
}

function parse_saturated_natural_53231(s_53233, b_53235, b_53235_Idx, start_53236) {
			var Tmp1;
					var Tmp4;

	var result_53238 = 0;

	var F={procname:"parseutils.parseSaturatedNatural",prev:framePtr,filename:"parseutils.nim",line:0};
	framePtr = F;
		F.line = 481;
		var i_53239 = start_53236;
		if (((i_53239 < (s_53233 != null ? s_53233.length : 0)) && (s_53233[chckIndx(i_53239, 0, (s_53233 != null ? s_53233.length : 0)+0-1)-0] == 43))) {
		F.line = 482;
		i_53239 = addInt(i_53239, 1);
		}
		
			if (!(i_53239 < (s_53233 != null ? s_53233.length : 0))) Tmp1 = false; else {				Tmp1 = (ConstSet6[s_53233[chckIndx(i_53239, 0, (s_53233 != null ? s_53233.length : 0)+0-1)-0]] != undefined);			}		if (Tmp1) {
		F.line = 484;
		b_53235[b_53235_Idx] = 0;
		L2: do {
			F.line = 485;
				L3: while (true) {
					if (!(i_53239 < (s_53233 != null ? s_53233.length : 0))) Tmp4 = false; else {						Tmp4 = (ConstSet7[s_53233[chckIndx(i_53239, 0, (s_53233 != null ? s_53233.length : 0)+0-1)-0]] != undefined);					}				if (!Tmp4) break L3;
					F.line = 486;
					var c_53268 = subInt(s_53233[chckIndx(i_53239, 0, (s_53233 != null ? s_53233.length : 0)+0-1)-0], 48);
					if ((b_53235[b_53235_Idx] <= divInt(subInt(2147483647, c_53268), 10))) {
					F.line = 488;
					b_53235[b_53235_Idx] = addInt(mulInt(b_53235[b_53235_Idx], 10), c_53268);
					}
					else {
						F.line = 490;
						b_53235[b_53235_Idx] = 2147483647;
					}
					
					F.line = 491;
					i_53239 = addInt(i_53239, 1);
					L5: do {
						F.line = 492;
							L6: while (true) {
							if (!((i_53239 < (s_53233 != null ? s_53233.length : 0)) && (s_53233[chckIndx(i_53239, 0, (s_53233 != null ? s_53233.length : 0)+0-1)-0] == 95))) break L6;
								F.line = 492;
								i_53239 = addInt(i_53239, 1);
							}
					} while(false);
				}
		} while(false);
		F.line = 493;
		result_53238 = subInt(i_53239, start_53236);
		}
		
	framePtr = F.prev;

	return result_53238;

}

function raiseRangeError() {
		var eHEX60gensym22457_22603 = null;
		eHEX60gensym22457_22603 = {m_type: NTI3662, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym22457_22603.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		eHEX60gensym22457_22603.parent = null;
		raiseException(eHEX60gensym22457_22603, "RangeError");

	
}

function HEX5BHEX5D_91304(s_91308, x_91310) {
	var result_91311 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
		F.line = 3977;
		var a_91401 = x_91310.a;
		F.line = 3978;
		var l_91601 = addInt(subInt(subInt((s_91308 != null ? s_91308.length : 0), x_91310.b), a_91401), 1);
		F.line = 3979;
		result_91311 = nimCopy(null, mnewString(chckRange(l_91601, 0, 2147483647)), NTI138);
		L1: do {
			F.line = 3980;
			var i_91609 = 0;
			F.line = 2739;
			var i_162566 = 0;
			L2: do {
				F.line = 2740;
					L3: while (true) {
					if (!(i_162566 < l_91601)) break L3;
						F.line = 3980;
						i_91609 = i_162566;
						F.line = 3980;
						result_91311[chckIndx(i_91609, 0, (result_91311 != null ? result_91311.length : 0)+0-1)-0] = s_91308[chckIndx(addInt(i_91609, a_91401), 0, (s_91308 != null ? s_91308.length : 0)+0-1)-0];
						F.line = 2742;
						i_162566 = addInt(i_162566, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_91311;

}

function HEX2EHEX2E_91239(a_91243, b_91244) {
	var result_91250 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"system.nim",line:0};
	framePtr = F;
		F.line = 502;
		nimCopy(result_91250, {a: a_91243, b: b_91244}, NTI91247);
	framePtr = F.prev;

	return result_91250;

}

function parse_standard_format_specifier_159324(s_159326, start_159327, ignore_unknown_suffix_159329) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_159330 = {fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0};

	var F={procname:"strformat.parseStandardFormatSpecifier",prev:framePtr,filename:"strformat.nim",line:0};
	framePtr = F;
		F.line = 379;
		result_159330.fill = 32;
		F.line = 380;
		result_159330.align = 0;
		F.line = 381;
		result_159330.sign = 45;
		F.line = 382;
		var i_159333 = start_159327;
		if (((addInt(i_159333, 1) < (s_159326 != null ? s_159326.length : 0)) && (ConstSet2[s_159326[chckIndx(addInt(i_159333, 1), 0, (s_159326 != null ? s_159326.length : 0)+0-1)-0]] != undefined))) {
		F.line = 384;
		result_159330.fill = s_159326[chckIndx(i_159333, 0, (s_159326 != null ? s_159326.length : 0)+0-1)-0];
		F.line = 385;
		result_159330.align = s_159326[chckIndx(addInt(i_159333, 1), 0, (s_159326 != null ? s_159326.length : 0)+0-1)-0];
		F.line = 386;
		i_159333 = addInt(i_159333, 2);
		}
		else {
		if (((i_159333 < (s_159326 != null ? s_159326.length : 0)) && (ConstSet3[s_159326[chckIndx(i_159333, 0, (s_159326 != null ? s_159326.length : 0)+0-1)-0]] != undefined))) {
		F.line = 388;
		result_159330.align = s_159326[chckIndx(i_159333, 0, (s_159326 != null ? s_159326.length : 0)+0-1)-0];
		F.line = 389;
		i_159333 = addInt(i_159333, 1);
		}
		}
		if (((i_159333 < (s_159326 != null ? s_159326.length : 0)) && (ConstSet4[s_159326[chckIndx(i_159333, 0, (s_159326 != null ? s_159326.length : 0)+0-1)-0]] != undefined))) {
		F.line = 392;
		result_159330.sign = s_159326[chckIndx(i_159333, 0, (s_159326 != null ? s_159326.length : 0)+0-1)-0];
		F.line = 393;
		i_159333 = addInt(i_159333, 1);
		}
		
		if (((i_159333 < (s_159326 != null ? s_159326.length : 0)) && (s_159326[chckIndx(i_159333, 0, (s_159326 != null ? s_159326.length : 0)+0-1)-0] == 35))) {
		F.line = 396;
		result_159330.alternateForm = true;
		F.line = 397;
		i_159333 = addInt(i_159333, 1);
		}
		
			if (!((addInt(i_159333, 1) < (s_159326 != null ? s_159326.length : 0)) && (s_159326[chckIndx(i_159333, 0, (s_159326 != null ? s_159326.length : 0)+0-1)-0] == 48))) Tmp1 = false; else {				Tmp1 = (ConstSet5[s_159326[chckIndx(addInt(i_159333, 1), 0, (s_159326 != null ? s_159326.length : 0)+0-1)-0]] != undefined);			}		if (Tmp1) {
		F.line = 400;
		result_159330.padWithZero = true;
		F.line = 401;
		i_159333 = addInt(i_159333, 1);
		}
		
		F.line = 403;
		var parsed_length_159391 = parse_saturated_natural_53231(s_159326, result_159330, "minimumWidth", i_159333);
		F.line = 404;
		i_159333 = addInt(i_159333, parsed_length_159391);
		if (((i_159333 < (s_159326 != null ? s_159326.length : 0)) && (s_159326[chckIndx(i_159333, 0, (s_159326 != null ? s_159326.length : 0)+0-1)-0] == 46))) {
		F.line = 406;
		i_159333 = addInt(i_159333, 1);
		F.line = 407;
		var parsed_length_b_159405 = parse_saturated_natural_53231(s_159326, result_159330, "precision", i_159333);
		F.line = 408;
		i_159333 = addInt(i_159333, parsed_length_b_159405);
		}
		else {
			F.line = 410;
			result_159330.precision = -1;
		}
		
			if (!(i_159333 < (s_159326 != null ? s_159326.length : 0))) Tmp2 = false; else {				Tmp2 = (ConstSet8[s_159326[chckIndx(i_159333, 0, (s_159326 != null ? s_159326.length : 0)+0-1)-0]] != undefined);			}		if (Tmp2) {
		F.line = 413;
		result_159330.typ = s_159326[chckIndx(i_159333, 0, (s_159326 != null ? s_159326.length : 0)+0-1)-0];
		F.line = 414;
		i_159333 = addInt(i_159333, 1);
		}
		
		F.line = 415;
		result_159330.endPosition = i_159333;
			if (!!((i_159333 == (s_159326 != null ? s_159326.length : 0)))) Tmp3 = false; else {				Tmp3 = !(ignore_unknown_suffix_159329);			}		if (Tmp3) {
		F.line = 3478;
		var eHEX60gensym159460_159603 = null;
		F.line = 3481;
		eHEX60gensym159460_159603 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 418;
		eHEX60gensym159460_159603.message = nimCopy(null, (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_91304(s_159326, HEX2EHEX2E_91239(i_159333, 1)) || []), NTI138);
		F.line = 3474;
		eHEX60gensym159460_159603.parent = null;
		F.line = 417;
		raiseException(eHEX60gensym159460_159603, "ValueError");
		}
		
	framePtr = F.prev;

	return result_159330;

}

function nucruneLen(s_55829) {
	var result_55830 = 0;

	var F={procname:"unicode.runeLen",prev:framePtr,filename:"unicode.nim",line:0};
	framePtr = F;
		F.line = 44;
		var i_55832 = 0;
		L1: do {
			F.line = 45;
				L2: while (true) {
				if (!(i_55832 < (s_55829 != null ? s_55829.length : 0))) break L2;
					if ((s_55829[chckIndx(i_55832, 0, (s_55829 != null ? s_55829.length : 0)+0-1)-0] <= 127)) {
					F.line = 46;
					i_55832 = addInt(i_55832, 1);
					}
					else {
					if ((((s_55829[chckIndx(i_55832, 0, (s_55829 != null ? s_55829.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
					F.line = 47;
					i_55832 = addInt(i_55832, 2);
					}
					else {
					if ((((s_55829[chckIndx(i_55832, 0, (s_55829 != null ? s_55829.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
					F.line = 48;
					i_55832 = addInt(i_55832, 3);
					}
					else {
					if ((((s_55829[chckIndx(i_55832, 0, (s_55829 != null ? s_55829.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
					F.line = 49;
					i_55832 = addInt(i_55832, 4);
					}
					else {
					if ((((s_55829[chckIndx(i_55832, 0, (s_55829 != null ? s_55829.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
					F.line = 50;
					i_55832 = addInt(i_55832, 5);
					}
					else {
					if ((((s_55829[chckIndx(i_55832, 0, (s_55829 != null ? s_55829.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
					F.line = 51;
					i_55832 = addInt(i_55832, 6);
					}
					else {
						F.line = 52;
					i_55832 = addInt(i_55832, 1);
					}
					}}}}}
					F.line = 53;
					result_55830 = addInt(result_55830, 1);
				}
		} while(false);
	framePtr = F.prev;

	return result_55830;

}

function rune_len_at_55962(s_55964, i_55965) {
	var result_55966 = 0;

	var F={procname:"unicode.runeLenAt",prev:framePtr,filename:"unicode.nim",line:0};
	framePtr = F;
		if ((s_55964[chckIndx(i_55965, 0, (s_55964 != null ? s_55964.length : 0)+0-1)-0] <= 127)) {
		F.line = 65;
		result_55966 = 1;
		}
		else {
		if ((((s_55964[chckIndx(i_55965, 0, (s_55964 != null ? s_55964.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
		F.line = 66;
		result_55966 = 2;
		}
		else {
		if ((((s_55964[chckIndx(i_55965, 0, (s_55964 != null ? s_55964.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
		F.line = 67;
		result_55966 = 3;
		}
		else {
		if ((((s_55964[chckIndx(i_55965, 0, (s_55964 != null ? s_55964.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
		F.line = 68;
		result_55966 = 4;
		}
		else {
		if ((((s_55964[chckIndx(i_55965, 0, (s_55964 != null ? s_55964.length : 0)+0-1)-0] >>> 0) >>> 2) == 62)) {
		F.line = 69;
		result_55966 = 5;
		}
		else {
		if ((((s_55964[chckIndx(i_55965, 0, (s_55964 != null ? s_55964.length : 0)+0-1)-0] >>> 0) >>> 1) == 126)) {
		F.line = 70;
		result_55966 = 6;
		}
		else {
			F.line = 71;
			result_55966 = 1;
		}
		}}}}}
	framePtr = F.prev;

	return result_55966;

}

function rune_offset_61644(s_61646, pos_61647, start_61648) {
	var result_61649 = 0;

	var F={procname:"unicode.runeOffset",prev:framePtr,filename:"unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 322;
		var i_61651 = 0;
		F.line = 323;
		var o_61652 = start_61648;
		L1: do {
			F.line = 324;
				L2: while (true) {
				if (!(i_61651 < pos_61647)) break L2;
					F.line = 325;
					o_61652 = addInt(o_61652, chckRange(rune_len_at_55962(s_61646, o_61652), 0, 2147483647));
					if (((s_61646 != null ? s_61646.length : 0) <= o_61652)) {
					F.line = 327;
					result_61649 = -1;
					break BeforeRet;
					}
					
					F.line = 328;
					i_61651 = addInt(i_61651, 1);
				}
		} while(false);
		F.line = 329;
		result_61649 = o_61652;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_61649;

}

function validate_utf8_58829(s_58831) {
						var Tmp3;
						var Tmp4;
						var Tmp5;
						var Tmp6;
						var Tmp7;
						var Tmp8;

	var result_58832 = 0;

	var F={procname:"unicode.validateUtf8",prev:framePtr,filename:"unicode.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 175;
		var i_58834 = 0;
		F.line = 176;
		var l_58835 = (s_58831 != null ? s_58831.length : 0);
		L1: do {
			F.line = 177;
				L2: while (true) {
				if (!(i_58834 < l_58835)) break L2;
					if ((s_58831[chckIndx(i_58834, 0, (s_58831 != null ? s_58831.length : 0)+0-1)-0] <= 127)) {
					F.line = 179;
					i_58834 = addInt(i_58834, 1);
					}
					else {
					if ((((s_58831[chckIndx(i_58834, 0, (s_58831 != null ? s_58831.length : 0)+0-1)-0] >>> 0) >>> 5) == 6)) {
					if ((s_58831[chckIndx(i_58834, 0, (s_58831 != null ? s_58831.length : 0)+0-1)-0] < 194)) {
					F.line = 181;
					result_58832 = i_58834;
					break BeforeRet;
					}
					
						if (!(addInt(i_58834, 1) < l_58835)) Tmp3 = false; else {							Tmp3 = (((s_58831[chckIndx(addInt(i_58834, 1), 0, (s_58831 != null ? s_58831.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);						}					if (Tmp3) {
					F.line = 182;
					i_58834 = addInt(i_58834, 2);
					}
					else {
						F.line = 183;
						result_58832 = i_58834;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_58831[chckIndx(i_58834, 0, (s_58831 != null ? s_58831.length : 0)+0-1)-0] >>> 0) >>> 4) == 14)) {
						if (!(addInt(i_58834, 2) < l_58835)) Tmp5 = false; else {							Tmp5 = (((s_58831[chckIndx(addInt(i_58834, 1), 0, (s_58831 != null ? s_58831.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);						}						if (!Tmp5) Tmp4 = false; else {							Tmp4 = (((s_58831[chckIndx(addInt(i_58834, 2), 0, (s_58831 != null ? s_58831.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);						}					if (Tmp4) {
					F.line = 186;
					i_58834 = addInt(i_58834, 3);
					}
					else {
						F.line = 187;
						result_58832 = i_58834;
						break BeforeRet;
					}
					
					}
					else {
					if ((((s_58831[chckIndx(i_58834, 0, (s_58831 != null ? s_58831.length : 0)+0-1)-0] >>> 0) >>> 3) == 30)) {
						if (!(addInt(i_58834, 3) < l_58835)) Tmp8 = false; else {							Tmp8 = (((s_58831[chckIndx(addInt(i_58834, 1), 0, (s_58831 != null ? s_58831.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);						}						if (!Tmp8) Tmp7 = false; else {							Tmp7 = (((s_58831[chckIndx(addInt(i_58834, 2), 0, (s_58831 != null ? s_58831.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);						}						if (!Tmp7) Tmp6 = false; else {							Tmp6 = (((s_58831[chckIndx(addInt(i_58834, 3), 0, (s_58831 != null ? s_58831.length : 0)+0-1)-0] >>> 0) >>> 6) == 2);						}					if (Tmp6) {
					F.line = 192;
					i_58834 = addInt(i_58834, 4);
					}
					else {
						F.line = 193;
						result_58832 = i_58834;
						break BeforeRet;
					}
					
					}
					else {
						F.line = 195;
						result_58832 = i_58834;
						break BeforeRet;
					}
					}}}
				}
		} while(false);
		F.line = 196;
		result_58832 = -1;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_58832;

}

function nsuRepeatChar(c_152656, count_152657) {
	var result_152658 = null;

	var F={procname:"strutils.repeat",prev:framePtr,filename:"strutils.nim",line:0};
	framePtr = F;
		F.line = 1294;
		result_152658 = nimCopy(null, mnewString(count_152657), NTI138);
		L1: do {
			F.line = 1295;
			var i_152667 = 0;
			F.line = 2699;
			var colontmp__162598 = 0;
			F.line = 1295;
			colontmp__162598 = subInt(count_152657, 1);
			F.line = 2710;
			var res_162599 = 0;
			L2: do {
				F.line = 2711;
					L3: while (true) {
					if (!(res_162599 <= colontmp__162598)) break L3;
						F.line = 1295;
						i_152667 = res_162599;
						F.line = 1295;
						result_152658[chckIndx(i_152667, 0, (result_152658 != null ? result_152658.length : 0)+0-1)-0] = c_152656;
						F.line = 2713;
						res_162599 = addInt(res_162599, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_152658;

}

function align_string_159223(s_159225, minimum_width_159226, align_159227, fill_159228) {
			var Tmp1;

	var result_159229 = null;

	var F={procname:"strformat.alignString",prev:framePtr,filename:"strformat.nim",line:0};
	framePtr = F;
		if ((minimum_width_159226 == 0)) {
		F.line = 282;
		result_159229 = nimCopy(null, s_159225, NTI138);
		}
		else {
			F.line = 284;
			if ((validate_utf8_58829(s_159225) == -1)) {
			Tmp1 = nucruneLen(s_159225);
			}
			else {
			Tmp1 = (s_159225 != null ? s_159225.length : 0);
			}
			
			var s_rune_len_159231 = Tmp1;
			F.line = 285;
			var to_fill_159232 = subInt(minimum_width_159226, s_rune_len_159231);
			if ((to_fill_159232 <= 0)) {
			F.line = 287;
			result_159229 = nimCopy(null, s_159225, NTI138);
			}
			else {
			if (((align_159227 == 60) || (align_159227 == 0))) {
			F.line = 289;
			result_159229 = nimCopy(null, (s_159225 || []).concat(nsuRepeatChar(fill_159228, chckRange(to_fill_159232, 0, 2147483647)) || []), NTI138);
			}
			else {
			if ((align_159227 == 94)) {
			F.line = 291;
			var half_159233 = divInt(to_fill_159232, 2);
			F.line = 292;
			result_159229 = nimCopy(null, (nsuRepeatChar(fill_159228, chckRange(half_159233, 0, 2147483647)) || []).concat(s_159225 || [],nsuRepeatChar(fill_159228, chckRange(subInt(to_fill_159232, half_159233), 0, 2147483647)) || []), NTI138);
			}
			else {
				F.line = 294;
				result_159229 = nimCopy(null, (nsuRepeatChar(fill_159228, chckRange(to_fill_159232, 0, 2147483647)) || []).concat(s_159225 || []), NTI138);
			}
			}}
		}
		
	framePtr = F.prev;

	return result_159229;

}

function format_value_159688(result_159691, result_159691_Idx, value_159692, specifier_159693) {
	var F={procname:"strformat.formatValue",prev:framePtr,filename:"strformat.nim",line:0};
	framePtr = F;
		F.line = 502;
		var spec_159694 = parse_standard_format_specifier_159324(specifier_159693, 0, false);
		F.line = 503;
		var value_159695 = nimCopy(null, value_159692, NTI138);
		F.line = 504;
		switch (spec_159694.typ) {
		case 115:
		case 0:
			break;
		default: 
			F.line = 3478;
			var eHEX60gensym159698_159803 = null;
			F.line = 3481;
			eHEX60gensym159698_159803 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			F.line = 508;
			eHEX60gensym159698_159803.message = nimCopy(null, (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_159694.typ]), NTI138);
			F.line = 3474;
			eHEX60gensym159698_159803.parent = null;
			F.line = 507;
			raiseException(eHEX60gensym159698_159803, "ValueError");
			break;
		}
		if (!((spec_159694.precision == -1))) {
		if ((spec_159694.precision < nucruneLen(value_159695))) {
		F.line = 512;
		(value_159695 == null ? value_159695 = mnewString(chckRange(rune_offset_61644(value_159695, chckRange(spec_159694.precision, 0, 2147483647), 0), 0, 2147483647)) : value_159695.length = chckRange(rune_offset_61644(value_159695, chckRange(spec_159694.precision, 0, 2147483647), 0), 0, 2147483647));
		}
		
		}
		
		F.line = 513;
		if (result_159691[result_159691_Idx] != null) { result_159691[result_159691_Idx] = (result_159691[result_159691_Idx]).concat(align_string_159223(value_159695, spec_159694.minimumWidth, spec_159694.align, spec_159694.fill)); } else { result_159691[result_159691_Idx] = align_string_159223(value_159695, spec_159694.minimumWidth, spec_159694.align, spec_159694.fill).slice(); };
	framePtr = F.prev;

	
}

function sys_fatal_15062(message_15066) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"fatal.nim",line:0};
	framePtr = F;
		F.line = 34;
		var e_15203 = null;
		F.line = 37;
		e_15203 = {m_type: NTI3650, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 38;
		e_15203.message = nimCopy(null, message_15066, NTI138);
		F.line = 39;
		raiseException(e_15203, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_15058(msg_15060) {
	var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"assertions.nim",line:0};
	framePtr = F;
		F.line = 20;
		sys_fatal_15062(msg_15060);
	framePtr = F.prev;

	
}

function failed_assert_impl_15266(msg_15268) {
	var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"assertions.nim",line:0};
	framePtr = F;
		F.line = 27;
		raise_assert_15058(msg_15268);
	framePtr = F.prev;

	
}

function mk_digit_159014(v_159016, typ_159017) {
			var Tmp1;

	var result_159018 = null;

	var F={procname:"strformat.mkDigit",prev:framePtr,filename:"strformat.nim",line:0};
	framePtr = F;
		if (!((v_159016 < 26))) {
		F.line = 270;
		failed_assert_impl_15266(makeNimstrLit("/usr/lib/nim/pure/strformat.nim(270, 9) `v < 26` "));
		}
		
		if ((v_159016 < 10)) {
		F.line = 272;
		result_159018 = nimCopy(null, nimCharToStr(chckRange(addInt(48, v_159016), 0, 255)), NTI138);
		}
		else {
			F.line = 274;
			if ((typ_159017 == 120)) {
			Tmp1 = 97;
			}
			else {
			Tmp1 = 65;
			}
			
			result_159018 = nimCopy(null, nimCharToStr(chckRange(subInt(addInt(Tmp1, v_159016), 10), 0, 255)), NTI138);
		}
		
	framePtr = F.prev;

	return result_159018;

}

function format_int_162210(n_162213, radix_162214, spec_162215) {
		var Tmp7;

	var result_162216 = null;

	var F={procname:"formatInt.formatInt",prev:framePtr,filename:"strformat.nim",line:0};
	framePtr = F;
		F.line = 318;
		var v_162401 = n_162213;
		F.line = 319;
		var negative_162402 = (v_162401 < 0);
		if (negative_162402) {
		F.line = 322;
		v_162401 = mulInt(v_162401, -1);
		}
		
		F.line = 324;
		var xx_162404 = [];
		if (spec_162215.alternateForm) {
		F.line = 326;
		switch (spec_162215.typ) {
		case 88:
			F.line = 327;
			xx_162404 = nimCopy(null, makeNimstrLit("0x"), NTI138);
			break;
		case 120:
			F.line = 328;
			xx_162404 = nimCopy(null, makeNimstrLit("0x"), NTI138);
			break;
		case 98:
			F.line = 329;
			xx_162404 = nimCopy(null, makeNimstrLit("0b"), NTI138);
			break;
		case 111:
			F.line = 330;
			xx_162404 = nimCopy(null, makeNimstrLit("0o"), NTI138);
			break;
		default: 
			break;
		}
		}
		
		if ((v_162401 == 0)) {
		F.line = 334;
		result_162216 = nimCopy(null, makeNimstrLit("0"), NTI138);
		}
		else {
			F.line = 336;
			result_162216 = nimCopy(null, [], NTI138);
			L1: do {
				F.line = 337;
					L2: while (true) {
					if (!(0 < v_162401)) break L2;
						F.line = 338;
						var d_162407 = modInt(v_162401, radix_162214);
						F.line = 339;
						v_162401 = divInt(v_162401, radix_162214);
						F.line = 340;
						if (result_162216 != null) { result_162216 = (result_162216).concat(mk_digit_159014(chckRange(d_162407, -2147483648, 2147483647), spec_162215.typ)); } else { result_162216 = mk_digit_159014(chckRange(d_162407, -2147483648, 2147483647), spec_162215.typ).slice(); };
					}
			} while(false);
			L3: do {
				F.line = 341;
				var idx_162416 = 0;
				F.line = 2737;
				var colontmp__162608 = 0;
				F.line = 341;
				colontmp__162608 = divInt((result_162216 != null ? result_162216.length : 0), 2);
				F.line = 2739;
				var i_162609 = 0;
				L4: do {
					F.line = 2740;
						L5: while (true) {
						if (!(i_162609 < colontmp__162608)) break L5;
							F.line = 341;
							idx_162416 = i_162609;
							F.line = 342;
							var Tmp6 = result_162216[chckIndx(idx_162416, 0, (result_162216 != null ? result_162216.length : 0)+0-1)-0]; result_162216[chckIndx(idx_162416, 0, (result_162216 != null ? result_162216.length : 0)+0-1)-0] = result_162216[chckIndx(subInt(subInt((result_162216 != null ? result_162216.length : 0), idx_162416), 1), 0, (result_162216 != null ? result_162216.length : 0)+0-1)-0]; result_162216[chckIndx(subInt(subInt((result_162216 != null ? result_162216.length : 0), idx_162416), 1), 0, (result_162216 != null ? result_162216.length : 0)+0-1)-0] = Tmp6;							F.line = 2742;
							i_162609 = addInt(i_162609, 1);
						}
				} while(false);
			} while(false);
		}
		
		if (spec_162215.padWithZero) {
		F.line = 344;
		if (negative_162402) Tmp7 = true; else {			Tmp7 = !((spec_162215.sign == 45));		}		var sign_162432 = Tmp7;
		F.line = 345;
		var to_fill_162437 = subInt(subInt(subInt(spec_162215.minimumWidth, (result_162216 != null ? result_162216.length : 0)), (xx_162404 != null ? xx_162404.length : 0)), (sign_162432 ? 1:0));
		if ((0 < to_fill_162437)) {
		F.line = 347;
		result_162216 = nimCopy(null, (nsuRepeatChar(48, chckRange(to_fill_162437, 0, 2147483647)) || []).concat(result_162216 || []), NTI138);
		}
		
		}
		
		if (negative_162402) {
		F.line = 350;
		result_162216 = nimCopy(null, (makeNimstrLit("-") || []).concat(xx_162404 || [],result_162216 || []), NTI138);
		}
		else {
		if (!((spec_162215.sign == 45))) {
		F.line = 352;
		result_162216 = nimCopy(null, [spec_162215.sign].concat(xx_162404 || [],result_162216 || []), NTI138);
		}
		else {
			F.line = 354;
			result_162216 = nimCopy(null, (xx_162404 || []).concat(result_162216 || []), NTI138);
		}
		}
		if ((spec_162215.align == 60)) {
		L8: do {
			F.line = 357;
			var i_162445 = 0;
			F.line = 2737;
			var colontmp__162613 = 0;
			F.line = 2737;
			var colontmp__162614 = 0;
			F.line = 357;
			colontmp__162613 = (result_162216 != null ? result_162216.length : 0);
			F.line = 357;
			colontmp__162614 = spec_162215.minimumWidth;
			F.line = 2739;
			var i_162615 = colontmp__162613;
			L9: do {
				F.line = 2740;
					L10: while (true) {
					if (!(i_162615 < colontmp__162614)) break L10;
						F.line = 357;
						i_162445 = i_162615;
						F.line = 358;
						if (result_162216 != null) { addChar(result_162216, spec_162215.fill); } else { result_162216 = [spec_162215.fill]; };
						F.line = 2742;
						i_162615 = addInt(i_162615, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			F.line = 360;
			var to_fill_162446 = subInt(spec_162215.minimumWidth, (result_162216 != null ? result_162216.length : 0));
			if ((spec_162215.align == 94)) {
			F.line = 362;
			var half_162447 = divInt(to_fill_162446, 2);
			F.line = 363;
			result_162216 = nimCopy(null, (nsuRepeatChar(spec_162215.fill, chckRange(half_162447, 0, 2147483647)) || []).concat(result_162216 || [],nsuRepeatChar(spec_162215.fill, chckRange(subInt(to_fill_162446, half_162447), 0, 2147483647)) || []), NTI138);
			}
			else {
				if ((0 < to_fill_162446)) {
				F.line = 366;
				result_162216 = nimCopy(null, (nsuRepeatChar(spec_162215.fill, chckRange(to_fill_162446, 0, 2147483647)) || []).concat(result_162216 || []), NTI138);
				}
				
			}
			
		}
		
	framePtr = F.prev;

	return result_162216;

}

function format_value_162092(result_162095, result_162095_Idx, value_162096, specifier_162097) {
	var F={procname:"formatValue.formatValue",prev:framePtr,filename:"strformat.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (((specifier_162097 != null ? specifier_162097.length : 0) == 0)) {
		F.line = 426;
		if (result_162095[result_162095_Idx] != null) { result_162095[result_162095_Idx] = (result_162095[result_162095_Idx]).concat(cstrToNimstr((value_162096)+"")); } else { result_162095[result_162095_Idx] = cstrToNimstr((value_162096)+"").slice(); };
		F.line = 427;
		break BeforeRet;
		}
		
		F.line = 428;
		var spec_162098 = parse_standard_format_specifier_159324(specifier_162097, 0, false);
		F.line = 429;
		var radix_162100 = 10;
		F.line = 430;
		switch (spec_162098.typ) {
		case 120:
		case 88:
			F.line = 431;
			radix_162100 = 16;
			break;
		case 100:
		case 0:
			break;
		case 98:
			F.line = 433;
			radix_162100 = 2;
			break;
		case 111:
			F.line = 434;
			radix_162100 = 8;
			break;
		default: 
			F.line = 3478;
			var eHEX60gensym162102_162203 = null;
			F.line = 3481;
			eHEX60gensym162102_162203 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			F.line = 438;
			eHEX60gensym162102_162203.message = nimCopy(null, (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ") || []).concat([spec_162098.typ]), NTI138);
			F.line = 3474;
			eHEX60gensym162102_162203.parent = null;
			F.line = 436;
			raiseException(eHEX60gensym162102_162203, "ValueError");
			break;
		}
		F.line = 439;
		if (result_162095[result_162095_Idx] != null) { result_162095[result_162095_Idx] = (result_162095[result_162095_Idx]).concat(format_int_162210(value_162096, radix_162100, spec_162098)); } else { result_162095[result_162095_Idx] = format_int_162210(value_162096, radix_162100, spec_162098).slice(); };
	} while (false);
	framePtr = F.prev;

	
}
var people_162020 = [[{name: makeNimstrLit("John"), age: 45}, {name: makeNimstrLit("Kate"), age: 30}]];
L1: do {
	var person_162081 = [{name: null, age: 0}];
	var i_162530 = 0;
	if ((i_162530 <= 1)) {
	L2: do {
			L3: while (true) {
			if (!true) break L3;
				nimCopy(person_162081[0], people_162020[0][i_162530], NTI162015);
				var fmt_res_162085 = [mnewString(0)];
				format_value_159688(fmt_res_162085, 0, person_162081[0].name, []);
				if (fmt_res_162085[0] != null) { fmt_res_162085[0] = (fmt_res_162085[0]).concat(makeNimstrLit(" is ")); } else { fmt_res_162085[0] = makeNimstrLit(" is "); };
				format_value_162092(fmt_res_162085, 0, person_162081[0].age, []);
				if (fmt_res_162085[0] != null) { fmt_res_162085[0] = (fmt_res_162085[0]).concat(makeNimstrLit(" years old")); } else { fmt_res_162085[0] = makeNimstrLit(" years old"); };
				rawEcho(fmt_res_162085[0]);
				if ((1 <= i_162530)) {
				break L2;
				}
				
				i_162530 += 1;
			}
	} while(false);
	}
	
} while(false);
